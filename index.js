#!/usr/bin/env node

const chalk = require('chalk')
const fs = require('fs')
const archiver = require('archiver')
const path = require('path')
const shell = require('shelljs')
const semver = require('semver')

const currentVersion = require('./package.json').version

const repo = 'https://github.com/viewar/viewar-boilerplate.git'

//======================================================================================================================

const args = process.argv.slice(2)

console.log(chalk`{bold ViewAR SDK Command Line Interface v${currentVersion}}`)

const latestVersion = shell.exec('npm show viewar-cli version', {silent: true}).stdout.trim()

if (semver.gt(latestVersion, currentVersion)) {
  console.log(chalk`{bold 
A newer version is available: ${latestVersion}!} Update now by running:
  {green npm update -g viewar-cli}`)
}

(function () {
  if (args.length === 0 || args[0] === '--help') {
    printUsage()
    return process.exit(0)
  } else {
    switch (args[0]) {
      case 'init':
        return init(args[1], 'vanilla', args[2])
      case 'init-react':
        return init(args[1], 'react', args[2])
      case 'deploy':
        return deploy(args[1])
      case 'display-version':
        console.log(`Current app version is ${chalk.green(get('version'))}`)
        return process.exit(0)
      case 'set-version':
        if (args[1]) {
          setVersion(args[1])
          return process.exit(0)
        } else {
          console.log(chalk.red('Please provide a version!'))
          return process.exit(1)
        }
      case 'display-token':
        const token = get('token')
        console.log(`Current app token is ${chalk.green(token)}`)
        return process.exit(0)
      case 'set-token':
        if (args[1]) {
          setToken(args[1])
          return process.exit(0)
        } else {
          console.log(chalk.red('Please provide a new token!'))
          return process.exit(1)
        }
      default:
        console.log('Unsupported command: ' + args[0])
        printUsage()
        return process.exit(1)
    }
  }
}())

//======================================================================================================================

function printUsage () {
  console.log(chalk`
Usage:
  viewar-cli init {green [project name]}\tCreates a new plain JavaScript ViewAR project
  viewar-cli init-react {green [project name]}\tCreates a new React ViewAR project
  
  viewar-cli display-token \t\tDisplays the token of the project
  viewar-cli set-token {green [token]}\t\tSets a specific token for the project

  viewar-cli display-version \t\tDisplays the version of the project
  viewar-cli set-version {green [version]} \tSets a specific version for the project
  
  viewar-cli deploy {green [version]}	\tDeploys the project
`)
}

function zip (appRoot) {
  return new Promise((resolve, reject) => {
    const output = fs.createWriteStream(`${appRoot}/bundle.zip`)

    output.on('close', resolve)
    output.on('error', reject)

    const archive = archiver('zip', {})
    archive.pipe(output)
    archive.directory(`${appRoot}/build/`, false)
    archive.finalize()
  })
}

async function deploy (version) {
  try {
    console.log(chalk`Bundling app...`)
    shell.exec('npm run build', {silent: true})
    await zip(process.cwd())
    const oldVersion = get('version')
    version && setVersion(version, {silent: true})
    const config = JSON.parse(fs.readFileSync(path.resolve(process.cwd(), '.viewar-config'), 'utf8'))
    console.log(chalk`Uploading app bundle...`)
    uploadBundle(config.token, `${process.cwd()}/bundle.zip`)
    setVersion(oldVersion, {silent: true})
    shell.rm('-rf', `${process.cwd()}/bundle.zip`)
    shell.rm('-rf', `${process.cwd()}/build`)
    console.log(chalk`{bold Done!}`)
    process.exit(0)
  } catch (error) {
    console.error(error)
    process.exit(1)
  }
}

function displayConfigNotFound () {
  console.log(chalk.red('File .viewar-config not found! Are you in a project directory generated by the viewar-cli?'))
  process.exit(1)
}

function get (property) {
  try {
    const config = readConfig()
    if (!config) return
    return config[property]
  } catch (err) {
    displayConfigNotFound()
    process.exit(1)
  }
}

function readConfig () {
  const config = JSON.parse(fs.readFileSync(path.resolve(process.cwd(), '.viewar-config'), 'utf8'))
  if (!config.token) {
    displayConfigNotFound()
    process.exit(1)
  }
  return config
}

function setToken (token, {silent} = {}) {
  try {
    const config = readConfig()
    if (!config) return

    const newConfig = Object.assign({}, config, {
      token,
      version: token.split('-')[1].split('_')[0],
    })

    fs.writeFileSync(path.resolve(process.cwd(), '.viewar-config'), JSON.stringify(newConfig, null, '  '), 'utf8')

    if (!silent) {
      console.log(chalk`{bold Done!}
  Your new token is: {green newConfig.token}
  Do not forget to update the token in the settings at {red developer.viewar.com}`)
    }
    process.exit(0)
  } catch (err) {
    displayConfigNotFound()
    process.exit(1)
  }
}

function setVersion (version, {silent} = {}) {
  try {
    const config = readConfig()
    if (!config) return 1

    const token = get('token')

    const newConfig = Object.assign({}, config, {
      token: token.split('-')[0] + '-' + version + '_' + token.split('_')[1],
      version,
    })

    fs.writeFileSync(path.resolve(process.cwd(), '.viewar-config'), JSON.stringify(newConfig, null, '  '), 'utf8')

    if (!silent) {
      console.log(chalk`{bold Done!}
  Your new version is: {green newConfig.version}
  Your new token is: {green newConfig.token}
  Do not forget to update the token in the settings at {red developer.viewar.com}`)
    }
    process.exit(0)
  } catch (err) {
    displayConfigNotFound()
    process.exit(1)
  }
}

function init (projectName, type, token) {
  const dest = createProjectDir(projectName)
  shell.cd(dest)

  console.log(chalk.bold('\nDownloading boilerplate project...'))

  shell.exec(`git clone -b master ${repo} temp`, {silent: true})
  shell.mv(`./temp/${type}/*`, `.`)
  shell.rm('-rf', 'temp')
  shell.exec('git init', {silent: true})

  console.log(chalk.bold('\nInstalling dependencies...'))

  shell.exec('npm install', {silent: true})

  const packageInfo = JSON.parse(fs.readFileSync(path.resolve(process.cwd(), 'package.json'), 'utf8'))

  Object.assign(packageInfo, {
    name: projectName,
    version: '0.1.0',
    description: '',
  })

  fs.writeFileSync(path.resolve(process.cwd(), 'package.json'), JSON.stringify(packageInfo, null, '  '), 'utf8')

  const config = {
    token: token || `${Math.random().toString(36).slice(2)}-0.1.0_${Math.random().toString(36).slice(2)}`,
    version: '0.1.0',
  }

  fs.writeFileSync(path.resolve(process.cwd(), '.viewar-config'), JSON.stringify(config, null, '  '), 'utf8')

  console.log(chalk`
Done!
  Your app token is: {green ${config.token}}
  Add the token in the settings at {red developer.viewar.com}
  After that, enter the new project directory by running {green cd \`${projectName}\`}
  Run {green \`npm start\`} to start the development server
  From there, browse to {green localhost:8080 }
  Open {green \`/src/index.js\`} to begin editing your app.`)

  process.exit(1)
}

function createProjectDir (projectName) {
  const dest = path.join(process.cwd(), projectName)

  try {
    const stat = fs.statSync(dest)
    if (stat) {
      console.log(`A ${(stat.isDirectory() ? 'directory'
        : 'file')} named ${projectName} already exists! Exiting without creating a new project.`)
      process.exit(1)
    }
  } catch (e) {
    if (e.code !== 'ENOENT') {
      console.error(e)
      process.exit(1)
    } else {
      fs.mkdirSync(dest)
    }
  }

  return dest
}

function uploadBundle (token, path) {
  const url = 'http://dev2.viewar.com/resources/AppfilesUpload'
  const formData = {
    token,
    file: fs.createReadStream(path),
  }

  const req = request.post({url, formData}, (err, resp, body) => {
    if (err) {
      console.log('Error!', err)
    } else {
      console.log(chalk`{bold Deployment successful!}`)
    }
  })
}
